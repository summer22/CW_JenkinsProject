//
//  CMT_ViewController.m
//  CongMingTou
//
//  Created by summer on 16/5/25.
//  Copyright © 2016年 QiYuan. All rights reserved.
//

#import "CMT_ViewController.h"
#import "PCCircleView.h"
#import "PCCircleViewConst.h"
#import "PCCircleInfoView.h"
#import "PCCircle.h"
#import "CMT_GestureShakeLabel.h"
#import "CMT_ForgetGesturesPwdValidationViewController.h"
#import "CMT_NavigationController.h"

#define DOWNTIMESECMINTS 300

@interface CMT_ViewController ()<CircleViewDelegate>
{
    NSTimer *times;
}
@property (nonatomic,assign) NSTimeInterval late;

/**
 *  重设按钮
 */
@property (nonatomic, strong) UIButton *resetBtn;

/** 提示label */
@property (nonatomic,strong)CMT_GestureShakeLabel *msgLabel;

/** logo头像 */
@property (nonatomic,strong)UIImageView *logoImg;

/** 重绘 */
@property (nonatomic,strong)UIButton *againDisplayBtn;

/** 跳过 */
@property (nonatomic,strong)UIButton *jumpBtn;
/**
 *  解锁界面
 */
@property (nonatomic, strong) PCCircleView *lockView;

/** 忘记密码 */
@property (nonatomic,strong) UIButton *forgetBtn;

/** 登录密码输入错误次数*/
@property (nonatomic,assign)NSInteger errorCount;
/** 修改手势密码 */
@property (nonatomic,strong)UIButton *backBtn;

@end

@implementation CMT_ViewController

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    // 记录第一次密码
    [PCCircleViewConst saveGesture:nil Key:gestureOneSaveKey];
    self.navigationController.navigationBar.hidden = YES;
}
- (void)viewWillDisappear:(BOOL)animated{
    [super viewWillDisappear:animated];
    self.navigationController.navigationBar.hidden = NO;
}
- (void)viewDidLoad {
    
    [super viewDidLoad];

    [self.view setBackgroundColor:ThemeBackgroundColor];
    // 初始化ui界面
    [self setupSubViewsSettingVc];
    
    self.errorCount = 0;
    NSUserDefaults *def = [NSUserDefaults standardUserDefaults];
    
    if ((self.type == 2) && [def objectForKey:@"late"]) {

        [self errorToLockGesFiveMin];
    }
}

#pragma mark - 设置手势密码界面
- (void)setupSubViewsSettingVc
{
    // 解锁界面
    PCCircleView *lockView = [[PCCircleView alloc] init];
    lockView.delegate = self;
    self.lockView = lockView;
    [self.view addSubview:lockView];
    [self.lockView setType:CircleViewTypeSetting];

    self.msgLabel = [[CMT_GestureShakeLabel alloc] initWithFrame:CGRectMake(0, 80 * CMT_6PERCENTY, CMT_ScreenWidth, 25 * CMT_6PERCENTY)];
    self.msgLabel.textColor = CommonWhiteColor;
    self.msgLabel.text = @"您好，请绘制手势密码";
    [self.view addSubview:self.msgLabel];

    self.logoImg = [[UIImageView alloc] initWithFrame:CGRectMake((CMT_ScreenWidth - 75 * CMT_6PERCENTY)/2,  self.msgLabel.bottom + 30 * CMT_6PERCENTY, 74 * CMT_6PERCENTY, 74 * CMT_6PERCENTY)];
    self.logoImg.image = [UIImage imageNamed:@"logo"];
    [self.view addSubview:self.logoImg];
    
    self.forgetBtn = [CMT_Tools getButtonWithFrame:CMT_CGRECTMAKE(lockView.right - 100, lockView.bottom + 30, 80, 30) BackGroudColor:[UIColor clearColor ] Title:@"忘记密码" TitleColor:CommonWhiteColor textFont:14];
    [ self.forgetBtn addTarget:self action:@selector(forgetBtnClick) forControlEvents:UIControlEventTouchUpInside];
    self.forgetBtn.hidden = YES;
    [self.view addSubview:self.forgetBtn];

    self.againDisplayBtn = [CMT_Tools getButtonWithFrame:CMT_CGRECTMAKE(lockView.left + 20, lockView.bottom + 30, 80, 30) BackGroudColor:[UIColor clearColor ] Title:@"重新绘制" TitleColor:CommonWhiteColor textFont:14];
    [self.againDisplayBtn addTarget:self action:@selector(againDisplayBtnClick) forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:self.againDisplayBtn];
    
    self.jumpBtn = [CMT_Tools getButtonWithFrame:CMT_CGRECTMAKE(lockView.right - 80, lockView.bottom + 30, 50, 30) BackGroudColor:[UIColor clearColor] Title:@"跳过" TitleColor:CommonWhiteColor textFont:14];
    [self.jumpBtn addTarget:self action:@selector(jumpBtnClick) forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:self.jumpBtn];
    
    self.backBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    self.backBtn.frame = CGRectMake(15, 28, 28, 28) ;
    [self.backBtn addTarget:self action:@selector(backClick) forControlEvents:UIControlEventTouchUpInside];
    [self.backBtn setBackgroundImage:[UIImage imageNamed:@"NavBarBack"] forState:UIControlStateNormal];
    self.backBtn.size = self.backBtn.currentBackgroundImage.size;
    [self.view addSubview:self.backBtn];


    //chongshe
    if (self.type == GestureViewControllerTypeReset) {
        
        self.againDisplayBtn.hidden = YES;
        self.jumpBtn.hidden = YES;
        self.forgetBtn.hidden = NO;
        self.backBtn.hidden = NO;
        [self.lockView setType:CircleViewTypeVerify];
        self.msgLabel.text = @"请输入原手势密码";

    }else if(self.type == GestureViewControllerTypeForget){
        self.againDisplayBtn.hidden = YES;
        self.jumpBtn.hidden = YES;
        self.forgetBtn.hidden = YES;
        self.backBtn.hidden = YES;
        [self.lockView setType:CircleViewTypeSetting];
        self.msgLabel.text = @"请输入新手势密码";
       
    }else if(self.type == GestureViewControllerTypeSetting){
        
         self.againDisplayBtn.hidden = NO;
        self.jumpBtn.hidden = NO;
        self.forgetBtn.hidden = YES;
        self.backBtn.hidden = YES;
        [self.lockView setType:CircleViewTypeSetting];
        
     }if (self.type == GestureViewControllerTypeLogin){
         self.againDisplayBtn.hidden = YES;
         self.jumpBtn.hidden = YES;
         self.forgetBtn.hidden = NO;
         self.backBtn.hidden = YES;
         [self.lockView setType:CircleViewTypeLogin];
     }
}
#pragma mark -- 修改手势密码返回按钮点击事件
- (void)backClick
{
    [self dismissViewControllerAnimated:YES completion:nil];
}

#pragma mark -- 忘记密码点击事件
- (void)forgetBtnClick
{
//忘记密码点击事件

    CMT_ForgetGesturesPwdValidationViewController *modifyGesturesPwdValidationVC = [[CMT_ForgetGesturesPwdValidationViewController alloc]init];
    [self.navigationController pushViewController:modifyGesturesPwdValidationVC animated:YES];
}

#pragma mark 重新绘制点击事件
- (void)againDisplayBtnClick
{
// 重新绘制
    [PCCircleViewConst saveGesture:nil Key:gestureOneSaveKey];
    self.msgLabel.text = @"您好，请绘制手势密码";
    [self.lockView setType:CircleViewTypeSetting];
}

#pragma mark -- 跳过按钮点击事件
- (void)jumpBtnClick
{
//跳过
    [self dismissViewControllerAnimated:YES completion:nil];
}

#pragma mark - circleView - delegate - setting
- (void)circleView:(PCCircleView *)view type:(CircleViewType)type connectCirclesLessThanNeedWithGesture:(NSString *)gesture
{
    NSString *gestureOne = [PCCircleViewConst getGestureWithKey:gestureOneSaveKey];
    
    // 看是否存在第一个密码
    if ([gestureOne length]) {
        [self.msgLabel showWarnMsgAndShake:gestureTextDrawAgainError];//文字提示
    } else {
        CMT_Log(@"密码长度不合法%@", gesture);
        [self.msgLabel showWarnMsgAndShake:gestureTextConnectLess];
    }
}

- (void)circleView:(PCCircleView *)view type:(CircleViewType)type didCompleteSetFirstGesture:(NSString *)gesture
{
    CMT_Log(@"获得第一个手势密码%@", gesture);
    [self.msgLabel showWarnMsg:gestureTextDrawAgain];
}

- (void)circleView:(PCCircleView *)view type:(CircleViewType)type didCompleteSetSecondGesture:(NSString *)gesture result:(BOOL)equal
{
    CMT_Log(@"获得第二个手势密码%@",gesture);
    
    if (equal) {
        
        CMT_Log(@"两次手势匹配！可以进行本地化保存了");
        
        [self.msgLabel showWarnMsg:gestureTextSetSuccess];
        [PCCircleViewConst saveGesture:gesture Key:gestureFinalSaveKey];
        
        /**
         *  王兆华 ＋ 逻判断
         */
        /****************************************/
        if(_type == GestureViewControllerTypeSetting || _type == GestureViewControllerTypeForget || _type == GestureViewControllerTypeReset){//设置手势密码 或者忘记 重置
         
            CMT_GesturesPwdModel *gesPwdModel = [[CMT_GesturesPwdModel alloc]init];
            gesPwdModel.gesturePwd = gesture;
            gesPwdModel.loginGesturePwd = 1;
            gesPwdModel.openState = 1;
            [CMT_GesturesPasswordTool save:gesPwdModel];
            [self dismissViewControllerAnimated:YES completion:^{
               
            }];
        }
        
    } else {
        CMT_Log(@"两次手势不匹配！");
        [self.msgLabel showWarnMsgAndShake:gestureTextDrawAgainError];
    }
}

#pragma mark - circleView - delegate - login or verify gesture
- (void)circleView:(PCCircleView *)view type:(CircleViewType)type didCompleteLoginGesture:(NSString *)gesture result:(BOOL)equal
{
    // 此时的type有两种情况 Login or verify
    if (type == CircleViewTypeLogin) {
        
        if (equal) {
            CMT_Log(@"登陆成功！");
            
            if(_type == GestureViewControllerTypeLogin){
           
                [self reloadDownTimeData];

                CMT_GesturesPwdModel *model = [CMT_GesturesPasswordTool gesturesPwdModel];
                model.loginGesturePwd = 1;
                [CMT_GesturesPasswordTool save:model];
                [self dismissViewControllerAnimated:YES completion:nil];
            }

        } else {
            CMT_Log(@"密码错误！");
            [self geserror];

        }
    } else if (type == CircleViewTypeVerify) {
        
        self.lockView.userInteractionEnabled = YES;

        if (equal) {
            CMT_Log(@"验证成功，跳转到设置手势界面");
            self.msgLabel.text = @"请输入新手势密码";
            self.forgetBtn.hidden = YES;
            [self.lockView setType:CircleViewTypeSetting];
            
        } else {
            CMT_Log(@"原手势密码输入错误！");
            ++self.errorCount;
            
            if (self.errorCount == 5) {
                
                self.lockView.userInteractionEnabled = NO;
                [self.msgLabel showWarnMsgAndShake:@"密码错误次数超过限制，不能绘制"];

                return;
            }
            [self.msgLabel showWarnMsgAndShake:[NSString stringWithFormat:@"密码错误，还可以尝试%ld次",5-self.errorCount]];
        }
    }
}

#pragma mark -- 手势密码输入错误次数限制
- (void)geserror
{
    ++self.errorCount;
    
    if (self.errorCount == 5) {
        
        NSDate* dat = [NSDate dateWithTimeIntervalSinceNow:0];
        NSUserDefaults *def = [NSUserDefaults standardUserDefaults];
        [def setValue:dat forKey:@"late"];
        
        //判断输入错误密码5次，就冻结五分钟
        [self errorToLockGesFiveMin];
        return;
    }
    [self.msgLabel showWarnMsgAndShake:[NSString stringWithFormat:@"密码错误，还可以尝试%ld次",5-self.errorCount]];
}

- (void)circleViewNotFourTap:(NSString *)type
{
    if ([type isEqualToString:@"LOGIN"]) {
        [self.msgLabel showWarnMsgAndShake:gestureTextConnectLess];
    }else if([type isEqualToString:@"REPEAT"]){
        [self.msgLabel showWarnMsgAndShake:@"新手势密码不能和原手势密码相同"];
    }
}

//五分钟后解锁
- (void)errorToLockGesFiveMin
{
    self.lockView.userInteractionEnabled = NO;

    NSUserDefaults *def = [NSUserDefaults standardUserDefaults];
    NSDate* dats = [def objectForKey:@"late"];
    NSTimeInterval late = [dats timeIntervalSince1970]*1;
    self.late = late;
    
    [self timeRun];
}

- (void)timeRun
{
    times = [NSTimer timerWithTimeInterval:1 target:self selector:@selector(runsTime) userInfo:nil repeats:YES];
    
    [[NSRunLoop currentRunLoop] addTimer:times forMode:NSDefaultRunLoopMode];
}

- (void)runsTime
{
    if ([[self returnUploadTime: self.late] integerValue] <= 0) {
        self.msgLabel.text =@"您好，请绘制手势密码";
        [self reloadDownTimeData];
        self.lockView.userInteractionEnabled = YES;
        return;
    }
    self.msgLabel.text = [NSString stringWithFormat:@"错误次数超过限制,%@秒后可重新绘制",[self returnUploadTime: self.late]];
}

//登录成功或者倒计时完毕后清除存取的判断数据
- (void)reloadDownTimeData{
    NSUserDefaults *def = [NSUserDefaults standardUserDefaults];
    [def removeObjectForKey:@"late"];
    [times invalidate];
    times = nil;
    self.errorCount = 0;
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/*处理返回应该显示的时间*/
- (NSString *)returnUploadTime:(NSTimeInterval)late
{
    NSDate* dat = [NSDate dateWithTimeIntervalSinceNow:0];
    NSTimeInterval now = [dat timeIntervalSince1970]*1;
    NSString *timeString=@"";
    
    NSTimeInterval cha= now - late;
    
    if (cha/3600<1) {
        
        timeString = [NSString stringWithFormat:@"%f", cha];
        timeString = [timeString substringToIndex:timeString.length-7];
        timeString = [NSString stringWithFormat:@"%ld",DOWNTIMESECMINTS - [timeString integerValue]];
    }
    return timeString;
}



@end
