//
//  ScrollTitleView.m
//  CongMingTou
//
//  Created by wzh on 16/5/12.
//  Copyright © 2016年 wzh. All rights reserved.
//

#import "ScrollTitleView.h"
#define LineHeight 3
@interface ScrollTitleView(){
    int _currentIndex;

}


@property (strong, nonatomic) UIView *animationLineView;

@property (nonatomic, strong) NSArray *dataArray;

@end



@implementation ScrollTitleView

- (instancetype)initWithFrame:(CGRect)frame{
    if(self = [super initWithFrame:frame]){
        self.showsHorizontalScrollIndicator = NO;
        self.backgroundColor = [UIColor whiteColor];
    }
    return self;
}
- (NSArray *)dataArray{
    if(!_dataArray){
        _dataArray = [[NSMutableArray alloc]init];
    }
    return _dataArray;
}

- (void)setBtnTitleArray:(NSArray *)btnTitleArray{
    _btnTitleArray = btnTitleArray;
    [self createUI];
}
- (UIView *)animationLineView{
    if(!_animationLineView){
        _animationLineView = [[UIView alloc]init];
        _animationLineView.backgroundColor = ThemeBackgroundColor;
        [self addSubview:_animationLineView];
    }
    return _animationLineView;
}

- (void)createUI{

    
    _isAnimationMobile = YES;
    CGFloat lineX;
    CGFloat lineTopAndBottom = 5;
    CGFloat lineY = lineTopAndBottom;
    CGFloat lineW = 0.5;
    CGFloat lineH = self.height - lineTopAndBottom *2;
    
    
    CGFloat mid = 0;
    CGFloat leftAndRightMid = 0;
    CGFloat topAndBottomMid = 0;
    CGFloat count = self.btnTitleArray.count;
    CGFloat btnW = (self.width - (lineW +mid) * (count - 1) - leftAndRightMid * (count + 1)) / count;
    CGFloat btnH = self.height - topAndBottomMid *2;
    CGFloat btnX;
    CGFloat btnY = topAndBottomMid;
    
    
    
    for (int i=0; i < self.btnTitleArray.count; i++) {
        btnX = leftAndRightMid +(btnW + mid + lineW)*i;
        ZHButton *button = [ZHButton buttonWithFrame:CGRectMake(btnX, btnY, btnW, btnH) font:UIFont32 title:self.btnTitleArray[i] normalTitleColor:CommonImpTextColor selectTitleColor:ThemeBackgroundColor andBlock:^(ZHButton *button) {
            CMT_Log(@"%ld",button.tag);
            if(self.titleDelegate && [self.titleDelegate respondsToSelector:@selector(willSelectBtnWithIndex:andScrollViewTitlView:)]){
                [self.titleDelegate willSelectBtnWithIndex:_currentIndex andScrollViewTitlView:self];
            }
            if(_isAnimationMobile){
                [self addAnimateView:(int)button.tag];
                _currentIndex = (int)button.tag ;
                if(self.titleDelegate && [self.titleDelegate respondsToSelector:@selector(didSelectBtnWithIndex:)]){
                    [self.titleDelegate didSelectBtnWithIndex:_currentIndex];
                }
            }
        
        }];
        button.tag = i;
        [self addSubview:button];
        lineX = leftAndRightMid + btnW * i + mid/2 * i +lineW *i + btnW;
        if(i !=count - 1){
            UIView *midLine = [[UIView alloc]initWithFrame:CGRectMake(lineX, lineY, lineW, lineH)];
            midLine.backgroundColor = CommonLineColor;
            [self addSubview:midLine];
        }
        
        if(i == 0){
            button.selected = YES;
        }
    }
    
    UIView *bottomView = [[UIView alloc]initWithFrame:CGRectMake(0, self.height - 0.5, self.width, 0.5)];
    bottomView.backgroundColor = CommonLineColor;
    [self addSubview:bottomView];
}
- (void)layoutSubviews{
    CMT_Log(@"layoutSubviews");
    self.animationLineView.frame = CGRectMake(0, self.height - LineHeight, self.width / self.btnTitleArray.count, LineHeight);

}

#pragma mark - view动画
- (void)addAnimateView:(int)index{
    
    for (UIView *subView in self.subviews) {
        if([subView isKindOfClass:[ZHButton class]]){
            ZHButton *btn = (ZHButton  *)subView;
            btn.selected = NO;
            if(btn.tag == index){
                btn.selected = YES;
            }
        }
    }
    [UIView animateWithDuration:0.2 animations:^{
        _animationLineView.x = self.width / self.btnTitleArray.count *index;
        
    }];
}
@end
